name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Run go fmt
        run: |
          gofmt -s -d . | tee fmt.diff
          test ! -s fmt.diff
          
      - name: Run go vet
        run: |
          go vet ./...

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: tezos
          POSTGRES_PASSWORD: tezos
          POSTGRES_DB: tezos_delegations
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Run database migrations
        env:
          DATABASE_URL: postgres://tezos:tezos@localhost:5432/tezos_delegations?sslmode=disable
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          PGPASSWORD=tezos psql -h localhost -U tezos -d tezos_delegations -f migrations/000_create_tezos_db.sql || true
          PGPASSWORD=tezos psql -h localhost -U tezos -d tezos_delegations -f migrations/001_create_delegations_table.sql
          
      - name: Run unit tests
        env:
          DATABASE_URL: postgres://tezos:tezos@localhost:5432/tezos_delegations?sslmode=disable
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          
      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html
          echo "Coverage report generated at coverage.html"
          
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
          
      - name: Display coverage summary
        run: |
          echo "### Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out | tail -1 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Build binary
        run: |
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o tezos-delegation-service cmd/server/main.go
          ./tezos-delegation-service -version || echo "Binary built successfully"
          
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: tezos-delegation-service-linux-amd64
          path: tezos-delegation-service

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        run: |
          docker build -t tezos-delegation-service:${{ github.sha }} .
          docker build -t tezos-delegation-service:latest .
          
      - name: Test Docker image
        run: |
          docker run --rm tezos-delegation-service:latest /root/tezos-delegation-service -version || echo "Docker image works"
          
      - name: Save Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker save tezos-delegation-service:latest > tezos-delegation-service.tar
          
      - name: Upload Docker image artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: tezos-delegation-service.tar

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Start services with Docker Compose
        run: |
          docker-compose up -d postgres
          sleep 10
          docker-compose up -d tezos-delegation-service
          sleep 10
          
      - name: Test API endpoints
        run: |
          # Health check
          curl -f http://localhost:8080/health || exit 1
          echo "✓ Health check passed"
          
          # Readiness check
          curl -f http://localhost:8080/readiness || exit 1
          echo "✓ Readiness check passed"
          
          # API endpoint test
          curl -f http://localhost:8080/xtz/delegations?year=2025 || exit 1
          echo "✓ API endpoint test passed"
          
          # Metrics endpoint
          curl -f http://localhost:9090/metrics | grep -q "tezos_delegations_stored_total" || exit 1
          echo "✓ Metrics endpoint test passed"
          
      - name: Display logs on failure
        if: failure()
        run: |
          docker-compose logs
          
      - name: Clean up
        if: always()
        run: |
          docker-compose down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Run gosec security scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-results.json ./... || true
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: gosec-results.json